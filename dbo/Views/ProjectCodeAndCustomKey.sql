SELECT 
	wrE19."Proj Code" AS c0,
	wrE9."CUSTOMER_KEY" AS c1,
	wrE9."CUSTOMER_CODE" AS c2,
	wrE9."CUSTOMER_NAME" AS c3,
	wrE6."Title" AS c4,
	wrE20."Fiscal Year" AS c5,
	wrE19."General Ledger Key" AS c6,
	wrE20."Fiscal Month Key" AS c7,
	wrE6."Project Key" AS c8,
	wrE19."Organization Key" AS c9,
	wrE19."Fiscal Month Key" AS c10,
	wrE19."Project Key" AS c11
FROM (with all_fiscal_accounts as ( select gl.account_key          account_key, gl.organization_key     org_key, fm.fiscal_month_key     fiscal_month_key, fm.fiscal_year_key      fiscal_year_key, fm.begin_date           begin_date, fm.end_date             end_date, 0                       amount, a.type					acc_type, gl.transaction_currency transaction_currency, gl.local_currency       local_currency from (select distinct account_key, organization_key, transaction_currency, local_currency from general_ledger) gl cross join fiscal_month fm join account a on a.account_key = gl.account_key where fm.begin_date >= current_date - INTERVAL '3' year - INTERVAL '1' year ), re_accounts_cte as( select gl.account_key          account_key, gl.organization_key     org_key, gl.fiscal_month_key     fiscal_month_key, max(fm.fiscal_year_key)      fiscal_year_key, max(fm.begin_date)           begin_date, max(fm.end_date)             end_date, sum(case    when a.type = 'E' then (gl.debit_amount - gl.credit_amount) when a.type = 'R' then (gl.credit_amount - gl.debit_amount) else 0 end) amount, sum(case    when a.type = 'E' then (gl.local_debit_amount - gl.local_credit_amount) when a.type = 'R' then (gl.local_credit_amount - gl.local_debit_amount) else 0 end)	     local_amount, max(gl.transaction_currency) transaction_currency, max(gl.local_currency)       local_currency, max(a.type) 				 acc_type from general_ledger gl join fiscal_month   fm      on fm.fiscal_month_key = gl.fiscal_month_key join account        a       on a.account_key = gl.account_key where a.type in ('E','R') group by gl.account_key, gl.organization_key, gl.fiscal_month_key  union all  select afa.account_key          account_key, afa.org_key              org_key, afa.fiscal_month_key     fiscal_month_key, afa.fiscal_year_key      fiscal_year_key, afa.begin_date           begin_date, afa.end_date             end_date, 0                        amount, 0                        local_amount, afa.transaction_currency transaction_currency, afa.local_currency       local_currency, afa.acc_type 				 acc_type from all_fiscal_accounts afa where 	afa.acc_type in ('E','R') and not exists (select null from general_ledger gl1 where gl1.account_key = afa.account_key and gl1.organization_key = afa.org_key and gl1.fiscal_month_key = afa.fiscal_month_key) ), totals as( select  x.account_key               account_key, x.org_key                   org_key, x.acc_type                      account_type, fm_next.fiscal_month_key    fiscal_month_key, x.fiscal_month_key          prev_fiscal_month_key, sum(amount) over( partition by x.account_key, x.org_key order by x.begin_date )                       amount, sum(amount) over( partition by x.account_key, x.org_key order by x.begin_date )                       amount_c, sum(local_amount) over( partition by x.account_key, x.org_key order by x.begin_date )                       local_amount, sum(local_amount) over( partition by x.account_key, x.org_key order by x.begin_date )                       local_amount_c, x.transaction_currency, x.local_currency from ( select gl.account_key          account_key, gl.organization_key     org_key, gl.fiscal_month_key     fiscal_month_key, max(fm.begin_date)           begin_date, max(fm.end_date)             end_date, sum(case    when a.type = 'A' then (gl.debit_amount - gl.credit_amount) when a.type = 'L' then (gl.credit_amount - gl.debit_amount) else 0 end) amount, sum(case    when a.type = 'A' then (gl.local_debit_amount - gl.local_credit_amount) when a.type = 'L' then (gl.local_credit_amount - gl.local_debit_amount) else 0 end) local_amount, max(gl.local_currency)       local_currency, max(gl.transaction_currency) transaction_currency, max(a.type) acc_type from general_ledger gl join fiscal_month   fm      on fm.fiscal_month_key = gl.fiscal_month_key join account        a       on a.account_key = gl.account_key where a.type in ('A','L') group by gl.account_key, gl.organization_key , gl.fiscal_month_key  union all  select afa.account_key          account_key, afa.org_key              org_key, afa.fiscal_month_key     fiscal_month_key, afa.begin_date           begin_date, afa.end_date             end_date, 0                        amount, 0                        local_amount, afa.local_currency       local_currency, afa.transaction_currency transaction_currency, afa.acc_type from all_fiscal_accounts afa where 	afa.acc_type in ('A','L') and not exists (select null from general_ledger gl1 where gl1.account_key = afa.account_key and gl1.organization_key = afa.org_key and gl1.fiscal_month_key = afa.fiscal_month_key) ) x  join fiscal_month   fm_next on fm_next.begin_date = x.end_date + INTERVAL '1' day  union all  select  x.account_key               account_key, x.org_key                   org_key, max(x.acc_type)             account_type, fm_next.fiscal_month_key    fiscal_month_key, x.fiscal_month_key          prev_fiscal_month_key, case when fm_next.period_number = 1 then 0 else sum(y.amount) end amount, sum(y.amount)               amount_c, case when fm_next.period_number = 1 then 0 else sum(y.local_amount) end local_amount, sum(y.local_amount)         local_amount_c, max(x.transaction_currency) transaction_currency, max(x.local_currency)       local_currency from re_accounts_cte x join re_accounts_cte y on x.account_key = y.account_key and x.org_key  = y.org_key and x.begin_date >= y.begin_date and x.fiscal_year_key = y.fiscal_year_key  join fiscal_month   fm_next on fm_next.begin_date = x.end_date + INTERVAL '1' day join fiscal_year    fy      on fy.fiscal_year_key = fm_next.fiscal_year_key group by x.account_key, x.org_key , fm_next.fiscal_month_key, fm_next.period_number, x.fiscal_month_key ) select x."General Ledger Key", x."Acct Key", x."Customer Key", x."Organization Key", x."Project Key", x."Person Key", x."Fiscal Month Key", x."Acct Code", x."Acct Description", x."Acct Type", x."Acct Type Order", x."Credit Amount", x."Customer/Vendor Code", x."Customer/Vendor Name", x."Debit Amount", x."GL Description", x."Doc Number", x."Doc Type", x."Doc Type Description", x."Doc Key", x."Fin Org Code", x."Fin Org Name", x."Fiscal Period", x."Post Date", x."Quantity", x."Transaction Date", x."Legal Entity Org Code", x."Legal Entity Org Name", x."Person First Name", x."Person Last Name", x."Person Middle Initial", x."Proj Code", x."Proj Org Code", x."Proj Org Name", x."Proj Owning Org Code", x."Proj Owning Org Name", x."Reference", x."BEGINNING_BALANCE", x."ENDING_BALANCE", x."Transaction Currency Code", x."Local Currency Code", x."Local Beginning Balance", x."Local Credit Amount", x."Local Debit Amount", x."Local Ending Balance" from ( select NULL 						as "General Ledger Key", t.account_key               as "Acct Key", NULL 						as "Customer Key", t.org_key         			as "Organization Key", NULL 						as "Project Key", NULL 						as "Person Key", fm_prev.fiscal_month_key 	as "Fiscal Month Key", a.account_code              as "Acct Code", a.description               as "Acct Description", case a.type when 'A' then 'Asset' when 'E' then 'Expense' when 'L' then 'Liability' when 'R' then 'Revenue' else          'Unknown Account Type' end                         as "Acct Type", case a.type when 'A' then 1 when 'L' then 2 when 'R' then 3 when 'E' then 4 end                         as "Acct Type Order", NULL 						as "Credit Amount", NULL 						as "Customer/Vendor Code", NULL 						as "Customer/Vendor Name", NULL 						as "Debit Amount", 'Calculated Balance'		as "GL Description", NULL 						as "Doc Number", NULL 						as "Doc Key", NULL 						as "Doc Type", NULL 						as "Doc Type Description", org.customer_code           as "Fin Org Code", org.customer_name           as "Fin Org Name", case when fm_prev.period_number < 10 then concat(concat(concat(fy.name,'-'),'0'),cast(fm_prev.period_number as varchar(4))) else concat(concat(fy.name,'-'),cast(fm_prev.period_number as varchar(4))) end 						as "Fiscal Period", NULL 						as "Post Date", NULL 						as "Quantity", NULL 						as "Transaction Date", le.customer_code            as "Legal Entity Org Code", le.customer_name            as "Legal Entity Org Name", NULL 						as "Person First Name", NULL 						as "Person Last Name", NULL 						as "Person Middle Initial", NULL 						as "Proj Code", NULL 						as "Proj Org Code", NULL 						as "Proj Org Name", NULL 						as "Proj Owning Org Code", NULL 						as "Proj Owning Org Name", NULL 						as "Reference", t_p.amount                  as "BEGINNING_BALANCE", t.amount                    as "ENDING_BALANCE", ccc.iso_currency_code       as "Transaction Currency Code", lcc.iso_currency_code       as "Local Currency Code", t_p.local_amount            as "Local Beginning Balance", NULL                        as "Local Credit Amount", NULL                        as "Local Debit Amount", t.local_amount              as "Local Ending Balance"  from totals t join totals 				t_p on t.account_key = t_p.account_key AND t.org_key = t_p.org_key and t.prev_fiscal_month_key = t_p.fiscal_month_key join account 				a  on a.account_key = t.account_key join customer 				org on org.customer_key = t.org_key join fiscal_month  			fm  on fm.fiscal_month_key = t.fiscal_month_key join fiscal_month           fm_prev on fm_prev.end_date = fm.begin_date - INTERVAL '1' day join fiscal_year   			fy on fy.fiscal_year_key = fm_prev.fiscal_year_key left outer join customer  	le  on le.customer_key = org.legal_entity_key join currency_code          ccc on ccc.currency_code_key = t.transaction_currency join currency_code          lcc on lcc.currency_code_key = t.local_currency   where       not (t_p.amount = 0 and t.amount = 0)  and fm.begin_date >= current_date - INTERVAL '3' year union all select gl.general_ledger_key       as "General Ledger Key", a.account_key               as "Acct Key", gl.customer_key             as "Customer Key", gl.organization_key         as "Organization Key", gl.project_key              as "Project Key", gl.person_key               as "Person Key", gl.fiscal_month_key         as "Fiscal Month Key", a.account_code              as "Acct Code", a.description               as "Acct Description", case a.type when 'A' then 'Asset' when 'E' then 'Expense' when 'L' then 'Liability' when 'R' then 'Revenue' else          'Unknown Account Type' end                         as "Acct Type", case a.type when 'A' then 1 when 'L' then 2 when 'R' then 3 when 'E' then 4 end                         as "Acct Type Order", gl.credit_amount            as "Credit Amount", cust.customer_code          as "Customer/Vendor Code", cust.customer_name          as "Customer/Vendor Name", gl.debit_amount             as "Debit Amount", gl.description              as "GL Description", gl.document_number          as "Doc Number", gl.general_ledger_key       as "Doc Key", case gl.feature when 0 then 'VI' when 1 then 'VP' when 2 then 'F2' when 3 then 'CP' when 4 then 'D' when 5 then 'JE' when 6 then 'BR' when 7 then 'CI' when 8 then 'LC' when 9 then 'EC' when 10 then 'FY' when 11 then 'AL' when 13 then 'FA' when 14 then 'PILOB' else 'Unknown Document Type' end                         as "Doc Type", case gl.feature when 0 then 'Vendor Invoice' when 1 then 'Vendor Payment' when 2 then 'Unknown Feature 2' when 3 then 'Customer Payment' when 4 then 'Deposit' when 5 then 'Journal Entry' when 6 then 'Billing and Revenue Post' when 7 then 'Invoice' when 8 then 'Labor Cost Post' when 9 then 'Expense Report Cost Post' when 10 then 'General Ledger Closing' when 11 then 'Cost Pool Post' when 13 then 'Fixed Asset Post' when 14 then 'Pay in Lieu of Benefits' else 'Unknown Document Type' end                         as "Doc Type Description", org.customer_code           as "Fin Org Code", org.customer_name           as "Fin Org Name", case when fm.period_number < 10 then concat(concat(concat(fy.name,'-'),'0'),cast(fm.period_number as varchar(4))) else concat(concat(fy.name,'-'),cast(fm.period_number as varchar(4))) end 						as "Fiscal Period", gl.post_date                as "Post Date", gl.quantity                 as "Quantity", gl.transaction_date         as "Transaction Date", le.customer_code            as "Legal Entity Org Code", le.customer_name            as "Legal Entity Org Name", pers.first_name             as "Person First Name", pers.last_name              as "Person Last Name", pers.middle_initial         as "Person Middle Initial", proj.project_code           as "Proj Code", porg.customer_code          as "Proj Org Code", porg.customer_name          as "Proj Org Name", pown.customer_code          as "Proj Owning Org Code", pown.customer_name          as "Proj Owning Org Name", gl.reference                as "Reference", null 						as "BEGINNING_BALANCE", null 						as "ENDING_BALANCE", ccc.iso_currency_code       as "Transaction Currency Code", lcc.iso_currency_code       as "Local Currency Code", null                        as "Local Beginning Balance", gl.local_credit_amount      as "Local Credit Amount", gl.local_debit_amount       as "Local Debit Amount", null                        as "Local Ending Balance" from general_ledger gl join account              a     on a.account_key = gl.account_key join customer             org   on org.customer_key = gl.organization_key left outer join customer  le    on le.customer_key = org.legal_entity_key left outer join customer  cust  on cust.customer_key = gl.customer_key join fiscal_month         fm    on fm.fiscal_month_key = gl.fiscal_month_key join fiscal_year          fy    on fy.fiscal_year_key = fm.fiscal_year_key left outer join project   proj  on proj.project_key = gl.project_key left outer join customer  porg  on porg.customer_key = proj.customer_key left outer join customer  pown  on pown.customer_key = proj.owning_customer_key left outer join person    pers  on pers.person_key = gl.person_key join currency_code        ccc   on ccc.currency_code_key = gl.transaction_currency join currency_code        lcc   on lcc.currency_code_key = gl.local_currency where fm.begin_date >= current_date - INTERVAL '3' year ) x where  (exists (select null from member where person_key = '3896' and role_key = 1)) OR (exists (select null from org_access_person where person_key = '3896' and role_key = 33 and global_access = 'Y')) OR (x."Organization Key" in (   select customer_key from access_customer_view v join org_access_person oap on oap.org_access_person_key = v.org_access_person_key where oap.person_key = '3896' and oap.role_key = 33 and oap.access_type = 2 and legal_entity_ind = 'N'  UNION ALL  select customer_key from customer cust where cust.legal_entity_key in ( select customer_key from access_customer_view v join org_access_person oap on oap.org_access_person_key = v.org_access_person_key where oap.person_key = '3896' and oap.role_key = 33 and oap.access_type = 2 and legal_entity_ind = 'Y' ) ) )
) wrE19
INNER JOIN (with consol_tree_orgs as (select c.node_key org_key, max(case when p.tree_level = 0 then p.node_key else null end) org_key_0, max(case when p.tree_level = 1 then p.node_key else null end) org_key_1, max(case when p.tree_level = 2 then p.node_key else null end) org_key_2, max(case when p.tree_level = 3 then p.node_key else null end) org_key_3, max(case when p.tree_level = 4 then p.node_key else null end) org_key_4, max(case when p.tree_level = 5 then p.node_key else null end) org_key_5 from org_consolidation_tree c join org_consolidation_tree p on c.left_visit between p.left_visit and p.right_visit group by c.node_key) select c.customer_key			as "CUSTOMER_KEY", c.email_1099			as "EMAIL_1099", c.vendor_1099			as "VENDOR_1099", c.recipient_name_1099	as "RECIPIENT_NAME_1099", c.federal_tax_id		as "FEDERAL_TAX_ID", c.federal_tax_id_type	as "FEDERAL_TAX_ID_TYPE", c.financial_org			as "FINANCIAL_ORG", c.legal_entity			as "LEGAL_ENTITY", c.active				as "ACTIVE", c.classification		as "CLASSIFICATION", c.customer_code			as "CUSTOMER_CODE", org_cost_pool_tree1.customer_code as "Org Cost Pool Lv1 Code", org_cost_pool_tree1.customer_name as "Org Cost Pool Lv1 Name", coalesce(org_cost_pool_tree2.customer_code, org_cost_pool_tree1.customer_code) as "Org Cost Pool Lv2 Code", coalesce(org_cost_pool_tree2.customer_name, org_cost_pool_tree1.customer_name) as "Org Cost Pool Lv2 Name", coalesce(org_cost_pool_tree3.customer_code, org_cost_pool_tree2.customer_code, org_cost_pool_tree1.customer_code) as "Org Cost Pool Lv3 Code", coalesce(org_cost_pool_tree3.customer_name, org_cost_pool_tree2.customer_name, org_cost_pool_tree1.customer_name) as "Org Cost Pool Lv3 Name", coalesce(org_cost_pool_tree4.customer_code, org_cost_pool_tree3.customer_code, org_cost_pool_tree2.customer_code, org_cost_pool_tree1.customer_code) as "Org Cost Pool Lv4 Code", coalesce(org_cost_pool_tree4.customer_name, org_cost_pool_tree3.customer_name, org_cost_pool_tree2.customer_name, org_cost_pool_tree1.customer_name) as "Org Cost Pool Lv4 Name", coalesce(org_cost_pool_tree5.customer_code, org_cost_pool_tree4.customer_code, org_cost_pool_tree3.customer_code, org_cost_pool_tree2.customer_code, org_cost_pool_tree1.customer_code) as "Org Cost Pool Lv5 Code", coalesce(org_cost_pool_tree5.customer_name, org_cost_pool_tree4.customer_name, org_cost_pool_tree3.customer_name, org_cost_pool_tree2.customer_name, org_cost_pool_tree1.customer_name) as "Org Cost Pool Lv5 Name", coalesce(org_cost_pool_tree6.customer_code, org_cost_pool_tree5.customer_code, org_cost_pool_tree4.customer_code, org_cost_pool_tree3.customer_code, org_cost_pool_tree2.customer_code, org_cost_pool_tree1.customer_code) as "Org Cost Pool Lv6 Code", coalesce(org_cost_pool_tree6.customer_name, org_cost_pool_tree5.customer_name, org_cost_pool_tree4.customer_name, org_cost_pool_tree3.customer_name, org_cost_pool_tree2.customer_name, org_cost_pool_tree1.customer_name) as "Org Cost Pool Lv6 Name", c.entry_allowed			as "ENTRY_ALLOWED", c.begin_date			as "BEGIN_DATE", c.end_date				as "END_DATE", c.account_number		as "ACCOUNT_NUMBER", org_fin_tree1.customer_code as "Org Fin Lv1 Code", org_fin_tree1.customer_name as "Org Fin Lv1 Name", coalesce(org_fin_tree2.customer_code, org_fin_tree1.customer_code) as "Org Fin Lv2 Code", coalesce(org_fin_tree2.customer_name, org_fin_tree1.customer_name) as "Org Fin Lv2 Name", coalesce(org_fin_tree3.customer_code, org_fin_tree2.customer_code, org_fin_tree1.customer_code) as "Org Fin Lv3 Code", coalesce(org_fin_tree3.customer_name, org_fin_tree2.customer_name, org_fin_tree1.customer_name) as "Org Fin Lv3 Name", coalesce(org_fin_tree4.customer_code, org_fin_tree3.customer_code, org_fin_tree2.customer_code, org_fin_tree1.customer_code) as "Org Fin Lv4 Code", coalesce(org_fin_tree4.customer_name, org_fin_tree3.customer_name, org_fin_tree2.customer_name, org_fin_tree1.customer_name) as "Org Fin Lv4 Name", coalesce(org_fin_tree5.customer_code, org_fin_tree4.customer_code, org_fin_tree3.customer_code, org_fin_tree2.customer_code, org_fin_tree1.customer_code) as "Org Fin Lv5 Code", coalesce(org_fin_tree5.customer_name, org_fin_tree4.customer_name, org_fin_tree3.customer_name, org_fin_tree2.customer_name, org_fin_tree1.customer_name) as "Org Fin Lv5 Name", coalesce(org_fin_tree6.customer_code, org_fin_tree5.customer_code, org_fin_tree4.customer_code, org_fin_tree3.customer_code, org_fin_tree2.customer_code, org_fin_tree1.customer_code) as "Org Fin Lv6 Code", coalesce(org_fin_tree6.customer_name, org_fin_tree5.customer_name, org_fin_tree4.customer_name, org_fin_tree3.customer_name, org_fin_tree2.customer_name, org_fin_tree1.customer_name) as "Org Fin Lv6 Name", c.industry				as "INDUSTRY", c.sic_code				as "SIC_CODE", c.customer_name			as "CUSTOMER_NAME", org_org_tree1.customer_code as "Org Org Lv1 Code", org_org_tree1.customer_name as "Org Org Lv1 Name", coalesce(org_org_tree2.customer_code, org_org_tree1.customer_code) as "Org Org Lv2 Code", coalesce(org_org_tree2.customer_name, org_org_tree1.customer_name) as "Org Org Lv2 Name", coalesce(org_org_tree3.customer_code, org_org_tree2.customer_code, org_org_tree1.customer_code) as "Org Org Lv3 Code", coalesce(org_org_tree3.customer_name, org_org_tree2.customer_name, org_org_tree1.customer_name) as "Org Org Lv3 Name", coalesce(org_org_tree4.customer_code, org_org_tree3.customer_code, org_org_tree2.customer_code, org_org_tree1.customer_code) as "Org Org Lv4 Code", coalesce(org_org_tree4.customer_name, org_org_tree3.customer_name, org_org_tree2.customer_name, org_org_tree1.customer_name) as "Org Org Lv4 Name", coalesce(org_org_tree5.customer_code, org_org_tree4.customer_code, org_org_tree3.customer_code, org_org_tree2.customer_code, org_org_tree1.customer_code) as "Org Org Lv5 Code", coalesce(org_org_tree5.customer_name, org_org_tree4.customer_name, org_org_tree3.customer_name, org_org_tree2.customer_name, org_org_tree1.customer_name) as "Org Org Lv5 Name", coalesce(org_org_tree6.customer_code, org_org_tree5.customer_code, org_org_tree4.customer_code, org_org_tree3.customer_code, org_org_tree2.customer_code, org_org_tree1.customer_code) as "Org Org Lv6 Code", coalesce(org_org_tree6.customer_name, org_org_tree5.customer_name, org_org_tree4.customer_name, org_org_tree3.customer_name, org_org_tree2.customer_name, org_org_tree1.customer_name) as "Org Org Lv6 Name", coalesce(consol_org_tree1.customer_code, le_consol_org_tree1.customer_code) as "Org Consolidation Lv1 Code", coalesce(consol_org_tree1.customer_name, le_consol_org_tree1.customer_name) as "Org Consolidation Lv1 Name", coalesce(consol_org_tree2.customer_code, consol_org_tree1.customer_code, le_consol_org_tree2.customer_code, le_consol_org_tree1.customer_code) as "Org Consolidation Lv2 Code", coalesce(consol_org_tree2.customer_name, consol_org_tree1.customer_name, le_consol_org_tree2.customer_name, le_consol_org_tree1.customer_name) as "Org Consolidation Lv2 Name", coalesce(consol_org_tree3.customer_code, consol_org_tree2.customer_code, consol_org_tree1.customer_code, le_consol_org_tree3.customer_code, le_consol_org_tree2.customer_code, le_consol_org_tree1.customer_code) as "Org Consolidation Lv3 Code", coalesce(consol_org_tree3.customer_name, consol_org_tree2.customer_name, consol_org_tree1.customer_name, le_consol_org_tree3.customer_name, le_consol_org_tree2.customer_name, le_consol_org_tree1.customer_name) as "Org Consolidation Lv3 Name", coalesce(consol_org_tree4.customer_code, consol_org_tree3.customer_code, consol_org_tree2.customer_code, consol_org_tree1.customer_code, le_consol_org_tree4.customer_code, le_consol_org_tree3.customer_code, le_consol_org_tree2.customer_code, le_consol_org_tree1.customer_code) as "Org Consolidation Lv4 Code", coalesce(consol_org_tree4.customer_name, consol_org_tree3.customer_name, consol_org_tree2.customer_name, consol_org_tree1.customer_name, le_consol_org_tree4.customer_name, le_consol_org_tree3.customer_name, le_consol_org_tree2.customer_name, le_consol_org_tree1.customer_name) as "Org Consolidation Lv4 Name", coalesce(consol_org_tree5.customer_code, consol_org_tree4.customer_code, consol_org_tree3.customer_code, consol_org_tree2.customer_code, consol_org_tree1.customer_code, le_consol_org_tree5.customer_code, le_consol_org_tree4.customer_code, le_consol_org_tree3.customer_code, le_consol_org_tree2.customer_code, le_consol_org_tree1.customer_code) as "Org Consolidation Lv5 Code", coalesce(consol_org_tree5.customer_name, consol_org_tree4.customer_name, consol_org_tree3.customer_name, consol_org_tree2.customer_name, consol_org_tree1.customer_name, le_consol_org_tree5.customer_name, le_consol_org_tree4.customer_name, le_consol_org_tree3.customer_name, le_consol_org_tree2.customer_name, le_consol_org_tree1.customer_name) as "Org Consolidation Lv5 Name", coalesce(consol_org_tree6.customer_code, consol_org_tree5.customer_code, consol_org_tree4.customer_code, consol_org_tree3.customer_code, consol_org_tree2.customer_code, consol_org_tree1.customer_code, le_consol_org_tree6.customer_code, le_consol_org_tree5.customer_code, le_consol_org_tree4.customer_code, le_consol_org_tree3.customer_code, le_consol_org_tree2.customer_code, le_consol_org_tree1.customer_code) as "Org Consolidation Lv6 Code", coalesce(consol_org_tree6.customer_name, consol_org_tree5.customer_name, consol_org_tree4.customer_name, consol_org_tree3.customer_name, consol_org_tree2.customer_name, consol_org_tree1.customer_name, le_consol_org_tree6.customer_name, le_consol_org_tree5.customer_name, le_consol_org_tree4.customer_name, le_consol_org_tree3.customer_name, le_consol_org_tree2.customer_name, le_consol_org_tree1.customer_name) as "Org Consolidation Lv6 Name", c.sector						as "SECTOR", c.customer_size					as "CUSTOMER_SIZE", c.stock_symbol					as "STOCK_SYMBOL", ct.customer_type				as "CUSTOMER_TYPE", c.user01                        as "Org User01", c.user02                        as "Org User02", c.user03                        as "Org User03", c.user04                        as "Org User04", c.user05                        as "Org User05", c.user06                        as "Org User06", c.user07                        as "Org User07", c.user08                        as "Org User08", c.user09                        as "Org User09", c.user10                        as "Org User10", c.user11                        as "Org User11", c.user12                        as "Org User12", c.user13                        as "Org User13", c.user14                        as "Org User14", c.user15                        as "Org User15", c.user16                        as "Org User16", c.user17                        as "Org User17", c.user18                        as "Org User18", c.user19                        as "Org User19", c.user20                        as "Org User20", cgl.customer_code               as "LE Default Post Org", cle.customer_code               as "Org's Legal Entity Code", c.transact_elimination_flag     as "Elimination Org Indicator" from customer c left outer join customer_type  ct   on ct.customer_type_key = c.customer_type_key left outer join customer       cgl  on cgl.customer_key = c.default_gl_post_org_key left outer join customer       cle  on cle.customer_key = c.legal_entity_key left outer join (select c.node_key org_key, max(case when p.tree_level = 0 then p.node_key else null end) org_key_0, max(case when p.tree_level = 1 then p.node_key else null end) org_key_1, max(case when p.tree_level = 2 then p.node_key else null end) org_key_2, max(case when p.tree_level = 3 then p.node_key else null end) org_key_3, max(case when p.tree_level = 4 then p.node_key else null end) org_key_4, max(case when p.tree_level = 5 then p.node_key else null end) org_key_5 from org_cost_pool_tree c join org_cost_pool_tree p on c.left_visit between p.left_visit and p.right_visit group by c.node_key) org_cost_pool_tree_orgs on org_cost_pool_tree_orgs.org_key = c.customer_key  left outer join customer org_cost_pool_tree1 on org_cost_pool_tree1.customer_key = org_cost_pool_tree_orgs.org_key_0 left outer join customer org_cost_pool_tree2 on org_cost_pool_tree2.customer_key = org_cost_pool_tree_orgs.org_key_1 left outer join customer org_cost_pool_tree3 on org_cost_pool_tree3.customer_key = org_cost_pool_tree_orgs.org_key_2 left outer join customer org_cost_pool_tree4 on org_cost_pool_tree4.customer_key = org_cost_pool_tree_orgs.org_key_3 left outer join customer org_cost_pool_tree5 on org_cost_pool_tree5.customer_key = org_cost_pool_tree_orgs.org_key_4 left outer join customer org_cost_pool_tree6 on org_cost_pool_tree6.customer_key = org_cost_pool_tree_orgs.org_key_5 left outer join (select c.node_key org_key, max(case when p.tree_level = 0 then p.node_key else null end) org_key_0, max(case when p.tree_level = 1 then p.node_key else null end) org_key_1, max(case when p.tree_level = 2 then p.node_key else null end) org_key_2, max(case when p.tree_level = 3 then p.node_key else null end) org_key_3, max(case when p.tree_level = 4 then p.node_key else null end) org_key_4, max(case when p.tree_level = 5 then p.node_key else null end) org_key_5 from org_fin_tree c join org_fin_tree p on c.left_visit between p.left_visit and p.right_visit group by c.node_key) org_fin_tree_orgs on org_fin_tree_orgs.org_key = c.customer_key left outer join customer org_fin_tree1 on org_fin_tree1.customer_key = org_fin_tree_orgs.org_key_0 left outer join customer org_fin_tree2 on org_fin_tree2.customer_key = org_fin_tree_orgs.org_key_1 left outer join customer org_fin_tree3 on org_fin_tree3.customer_key = org_fin_tree_orgs.org_key_2 left outer join customer org_fin_tree4 on org_fin_tree4.customer_key = org_fin_tree_orgs.org_key_3 left outer join customer org_fin_tree5 on org_fin_tree5.customer_key = org_fin_tree_orgs.org_key_4 left outer join customer org_fin_tree6 on org_fin_tree6.customer_key = org_fin_tree_orgs.org_key_5 left outer join (select c.node_key org_key, max(case when p.tree_level = 0 then p.node_key else null end) org_key_0, max(case when p.tree_level = 1 then p.node_key else null end) org_key_1, max(case when p.tree_level = 2 then p.node_key else null end) org_key_2, max(case when p.tree_level = 3 then p.node_key else null end) org_key_3, max(case when p.tree_level = 4 then p.node_key else null end) org_key_4, max(case when p.tree_level = 5 then p.node_key else null end) org_key_5 from org_tree c join org_tree p on c.left_visit between p.left_visit and p.right_visit group by c.node_key) org_org_tree_orgs on org_org_tree_orgs.org_key = c.customer_key left outer join customer org_org_tree1 on org_org_tree1.customer_key = org_org_tree_orgs.org_key_0 left outer join customer org_org_tree2 on org_org_tree2.customer_key = org_org_tree_orgs.org_key_1 left outer join customer org_org_tree3 on org_org_tree3.customer_key = org_org_tree_orgs.org_key_2 left outer join customer org_org_tree4 on org_org_tree4.customer_key = org_org_tree_orgs.org_key_3 left outer join customer org_org_tree5 on org_org_tree5.customer_key = org_org_tree_orgs.org_key_4 left outer join customer org_org_tree6 on org_org_tree6.customer_key = org_org_tree_orgs.org_key_5  left outer join consol_tree_orgs le_consol_tree_orgs on le_consol_tree_orgs.org_key = cle.customer_key left outer join customer le_consol_org_tree1 on le_consol_org_tree1.customer_key = le_consol_tree_orgs.org_key_0 left outer join customer le_consol_org_tree2 on le_consol_org_tree2.customer_key = le_consol_tree_orgs.org_key_1 left outer join customer le_consol_org_tree3 on le_consol_org_tree3.customer_key = le_consol_tree_orgs.org_key_2 left outer join customer le_consol_org_tree4 on le_consol_org_tree4.customer_key = le_consol_tree_orgs.org_key_3 left outer join customer le_consol_org_tree5 on le_consol_org_tree5.customer_key = le_consol_tree_orgs.org_key_4 left outer join customer le_consol_org_tree6 on le_consol_org_tree6.customer_key = le_consol_tree_orgs.org_key_5 left outer join consol_tree_orgs org_consol_tree_orgs on org_consol_tree_orgs.org_key = c.customer_key left outer join customer consol_org_tree1 on consol_org_tree1.customer_key = org_consol_tree_orgs.org_key_0 left outer join customer consol_org_tree2 on consol_org_tree2.customer_key = org_consol_tree_orgs.org_key_1 left outer join customer consol_org_tree3 on consol_org_tree3.customer_key = org_consol_tree_orgs.org_key_2 left outer join customer consol_org_tree4 on consol_org_tree4.customer_key = org_consol_tree_orgs.org_key_3 left outer join customer consol_org_tree5 on consol_org_tree5.customer_key = org_consol_tree_orgs.org_key_4 left outer join customer consol_org_tree6 on consol_org_tree6.customer_key = org_consol_tree_orgs.org_key_5 where c.customer_key is not null 
) wrE9 ON (
	wrE19."Organization Key" = wrE9."CUSTOMER_KEY"
)
INNER JOIN (select fm.fiscal_month_key     as "Fiscal Month Key", fm.period_number        as "Fiscal Month", fm.begin_date           as "Fiscal Month Begin Date", fm.end_date             as "Fiscal Month End Date", case when fm.period_number < 10 then concat(concat(concat(fy.name,'-'),'0'),cast(fm.period_number as varchar(4))) else concat(concat(fy.name,'-'),cast(fm.period_number as varchar(4))) end					    as "Fiscal Period", case when fm.period_number in (1,2,3)     then 'Q1' when fm.period_number in (4,5,6)     then 'Q2' when fm.period_number in (7,8,9)     then 'Q3' when fm.period_number in (10,11,12)  then 'Q4' end                     as "Fiscal Quarter", fq.begin_date           as "Fiscal Quarter Begin Date", fq.end_date             as "Fiscal Quarter End Date", fy.name                 as "Fiscal Year", fy.begin_date           as "Fiscal Year Begin Date", fy.end_date             as "Fiscal Year End Date" from fiscal_month fm  join fiscal_year            fy  on fy.fiscal_year_key = fm.fiscal_year_key join fiscal_quarter         fq  on fq.fiscal_quarter_key = fm.fiscal_quarter_key  
) wrE20 ON (
	wrE19."Fiscal Month Key" = wrE20."Fiscal Month Key"
)
LEFT OUTER JOIN (with intercompany_support as( select pi.project_key, STRING_AGG(org.customer_name, ', ') as pi_list from project_intercompany pi left join customer org on org.customer_key= pi.ic_org group by pi.project_key ) select proj.project_key 						as "Project Key", proj.customer_key                   	as "Customer Key", proj.owning_customer_key            	as "Owning Cust Key", pra.billing_manager_open            	as "Billing Mgr Open", pra.billing_viewer_open             	as "Billing Viewer Open", pra.project_po_viewer_open          	as "Proj PO Viewer Open", pra.project_pr_viewer_open          	as "Proj PR Viewer Open", pra.project_document_viewer_open    	as "Proj Doc Viewer Open", pra.project_manager_open            	as "Proj Mgr Open", pra.project_viewer_open             	as "Proj Viewer Open", pra.resource_assigner_open          	as "Res Assigner Open", pra.resource_planner_open           	as "Res Planner Open", pra.resource_requestor_open         	as "Res Requestor Open", proj.expense_assignment_flag        	as "Expense Assign Flag", proj.future_charge                  	as "Future Charge", proj.item_assignment_flag           	as "Item Assign Flag", proj.time_assignment_flag           	as "Time Assign Flag", case proj.bill_rate_source when 'P' then 'P - Person Bill Rate' when 'L' then 'L - Labor Category Bill Rate' end                                     as "Proj Bill Rate Source", bt.code                                 as "Proj Billing Type Code", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,37,39)) then    proj.Exp_Bill_Budget else        null end                                     as "Proj Budget Exp Bill Amt", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,38,40)) then    proj.exp_cost_burden_budget else        null end                                     as "Proj Budget Exp Burdened Cost", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,38,40)) then    proj.exp_cost_budget else        null end                                     as "Proj Budget Exp Cost Amt", proj.hours_budget                       as "Proj Budget Hours", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,37,39)) then    proj.labor_bill_budget else        null end                                     as "Proj Budget Lab Bill Amt", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,38,40)) then    proj.labor_cost_burden_budget else        null end                                     as "Proj Budget Lab Burd Cost", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,38,40)) then    proj.Labor_Cost_Budget else        null end                                     as "Proj Budget Lab Cost Amt", proj.project_code                       as "Project Code", proj.purpose                            as "Purpose", proj.completed_date                     as "Completed Date", proj.project_color                      as "Project Color", case proj.cost_rate_source when 'P' then 'P - Person Cost Rate' when 'L' then 'L - Labor Category Cost Rate' end                                     as "Proj Cost Rate Source", cs.cost_structure                       as "Cost Structure", loc.location_name                       as "Location", pc.pay_code                             as "Pay Code", proj.leave_balance                      as "Leave Balance", proj.Enforce_Wbs_Dates                  as "Enforce Wbs Dates", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,37,39)) then    proj.exp_bill_est_tot else        null end                                     as "Proj Est Tot Exp Bill Amt", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,38,40)) then    proj.exp_cost_est_tot else        null end                                     as "Proj Est Tot Exp Cost Amt", proj.hours_est_tot                      as "Proj Est Total", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,37,39)) then    proj.labor_bill_est_tot else        null end                                     as "Proj Est Tot Lab Bill Amt", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,38,40)) then    proj.labor_cost_est_tot else        null end                                     as "Proj Est Tot Lab Cost Amt", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,37,39)) then    proj.Exp_Bill_Etc else        null end                                     as "Proj ETC Exp Bill Amt", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,38,40)) then    proj.exp_cost_etc else        null end                                     as "Proj ETC Exp Cost Amt", proj.hours_etc                          as "Proj ETC Hours", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,37,39)) then    proj.labor_bill_etc else        null end                                     as "Proj ETC Lab Bill Amt", case when exists(select person_key from member where person_key = '3896' and role_key in (1,21,38,40)) then    proj.labor_cost_etc else        null end                                     as "Proj ETC Labor Cost Amount", proj.er_task_required                   as "ER Task Reqd", proj.Account_Number                     as "Account Number", coalesce(proj.funded_value, proj.orig_funded_value)        as "Funded Value", proj.item_task_required                 as "Item Task Reqd", cle.customer_code                       as "Proj Legal Entity Code", cle.customer_name                       as "Proj Legal Entity Name", proj.limit_bill_to_funded               as "Proj Limit Bill to Funded", proj.limit_rev_to_funded                as "Proj Limit Rev to Funded", proj.location_required                  as "Location Reqd", proj.task_level_assignment              as "Task Level Assignment", perm.last_name 							as "Proj Manager Last Name", perm.first_name 					    as "Proj Manager First Name", perm.middle_initial                     as "Proj Manager Middle Initial", perm.username                           as "Proj Manager Username", perm.email                              as "Proj Manager Email", perl.last_name 							as "Proj Lead Last Name", perl.first_name 					    as "Proj Lead First Name", perl.middle_initial                     as "Proj Lead Middle Initial", perl.username                           as "Proj Lead Username", perl.email                              as "Proj Lead Email", perv.last_name 							as "Proj Viewer Last Name", perv.first_name 					    as "Proj Viewer First Name", perv.middle_initial                     as "Proj Viewer Middle Initial", perv.username                           as "Proj Viewer Username", perv.email                              as "Proj Viewer Email", c.customer_code                         as "Proj Org Code", c.customer_name                         as "Proj Org Name", proj.orig_end_date                      as "Original End Date", proj.orig_start_date                    as "Original Start Date", coo.customer_code                       as "Proj Owning Org Code", coo.customer_name                       as "Proj Owning Org Name", proj.percent_complete                   as "Percent Complete", proj.pct_complete_rule                  as "Percent Complete Rule", proj.exp_sub_po_required                as "Exp Sub PO Reqd", proj.ts_sub_po_required                 as "Ts Sub PO Reqd", pg.posting_group_name                   as "Posting Group Name", proj.probability_percent                as "Probability Percent", proj.use_labor_category                 as "Use Labor Category", proj.proj_require_time_comments         as "Proj Require Time Comments", proj.rev_end_date                       as "Rev End Date", proj.rev_start_date                     as "Rev Start Date", proj.self_assign_plans                  as "Self Assign Plans", proj.allow_self_plan                    as "Allow Self Plan", proj.assignment_flag                    as "Assignment Flag", ps.status                               as "Status", proj.ts_task_required                   as "Ts Task Reqd", proj.title                              as "Title", proj.tito_required                      as "Tito Reqd", coalesce(proj.total_value, proj.orig_total_value)         as "Total Value", pt.project_type                         as "Project Type", proj.user01                             as "Proj UDF 01", proj.user02                             as "Proj UDF 02", proj.user03                             as "Proj UDF 03", proj.user04                             as "Proj UDF 04", proj.user05                             as "Proj UDF 05", proj.user06                             as "Proj UDF 06", proj.user07                             as "Proj UDF 07", proj.user08                             as "Proj UDF 08", proj.user09                             as "Proj UDF 09", proj.user10                             as "Proj UDF 10", proj.user11                             as "Proj UDF 11", proj.user12                             as "Proj UDF 12", proj.user13                             as "Proj UDF 13", proj.user14                             as "Proj UDF 14", proj.user15                             as "Proj UDF 15", proj.user16                             as "Proj UDF 16", proj.user17                             as "Proj UDF 17", proj.user18                             as "Proj UDF 18", proj.user19                             as "Proj UDF 19", proj.user20                             as "Proj UDF 20", proj.orig_total_value					as "Total Value - Original", proj.orig_funded_value					as "Funded Value - Original", cn.contract_code						as "Contract Code", cn.contract_key							as "Contract Key", cn.contract_title 						as "Contract Title", coalesce(mcn.contract_code, cn.contract_code)				as "Master Contract Code", coalesce(mcn.contract_title, cn.contract_title)				as "Master Contract Title", coalesce(proj.total_cost, proj.orig_total_cost)			as "Total Cost - Current", proj.orig_total_cost 					as "Total Cost - Original", coalesce(proj.total_fee, proj.orig_total_fee)			as "Total Fee - Current", proj.orig_total_fee 					as "Total Fee - Original", coalesce(proj.funded_cost, proj.orig_funded_cost)			as "Funded Cost - Current", proj.orig_funded_cost 					as "Funded Cost - Original", coalesce(proj.funded_fee, proj.orig_funded_fee)			as "Funded Fee - Current", proj.orig_funded_fee 					as "Funded Fee - Original",  case when i_s.project_key is null then    'N' else        'Y' end                                     as "Intercompany Effort", i_s.pi_list								as "Intercompany Support", case when ce.code is not null then    concat(concat(cs.cost_structure,'-'),ce.code ) else        null end   									                as "Default Labor Cost Element", proj.created                            as "Project Created Date", fm.fee_method                           as "Project Fee Method", pf.fee_factor                           as "Project Fee Factor", pf.fee_factor_type                      as "Project Fee Factor Type", pf.fixed_fee_amount                     as "Fixed Fee Amount", proj.advanced_costing_flag              as "Advanced Costing Yes or No", ooc.iso_currency_code		              as "Project Owning Org Currency Code" from project proj join                customer                    c   on      c.customer_key = proj.customer_key left outer join     customer                    coo on      coo.customer_key = proj.owning_customer_key left outer join     customer_type               ctp on      ctp.customer_type_key = c.customer_type_key left outer join     billing_type                bt  on      bt.billing_type_key = proj.billing_type_key left outer join     cost_struct                 cs  on      cs.cost_struct_key = proj.cost_struct_key left outer join     location                    loc on      loc.location_key = proj.location_key left outer join     pay_code                    pc  on      pc.pay_code_key = proj.pay_code_key left outer join     project_open_access_view    pra on      pra.project_key = proj.project_key left outer join     project_controller          pcm on      pcm.project_key = proj.project_key and pcm.role_key = 3 and pcm.primary_ind = 'Y' left outer join     project_controller          pcl on      pcl.project_key = proj.project_key and pcl.role_key = 12 and pcl.primary_ind = 'Y' left outer join     project_controller          pcv on      pcv.project_key = proj.project_key and pcv.role_key = 14 and pcv.primary_ind = 'Y' left outer join     posting_group           pg      on      pg.posting_group_key = proj.posting_group_key join                project_status          ps      on      ps.project_status_key = proj.project_status_key join                project_type            pt      on      pt.project_type_key = proj.project_type_key left outer join     person                  perm    on      perm.person_key = pcm.person_key left outer join     person                  perl    on      perl.person_key = pcl.person_key left outer join     person                  perv    on      perv.person_key = pcv.person_key left outer join     org_tree                ot      on      ot.node_key = proj.customer_key left outer join     customer                col     on      col.customer_key = coo.legal_entity_key left outer join     customer                cle     on      cle.customer_key = col.customer_key left outer join 	contract				cn 		on 		cn.contract_key = proj.contract_key left outer join 	contract				mcn 	on 		cn.prime_contract_key = mcn.contract_key  left outer join 	intercompany_support    i_s		on		i_s.project_key = proj.project_key left outer join		cost_struct_labor 		csl		on 		csl.cost_struct_labor_key = proj.ic_cost_struct_labor_key left outer join 	cost_element			    ce 		on 		ce.cost_element_key = csl.cost_element_key left outer join   project_fee           pf    on    pf.project_key = proj.project_key and pf.fee_method_key in ( select pfi.fee_method_key as fee_method_key from project_fee pfi inner join fee_method fmi on fmi.fee_method_key = pfi.fee_method_key and pfi.project_key  = proj.project_key order by fmi.fee_method asc fetch first 1 row only ) left outer join     fee_method fm on fm.fee_method_key = pf.fee_method_key left outer join     currency_code               ooc on      ooc.currency_code_key = coo.currency_code_key where  (exists (select 'x' from member where person_key = '3896' and role_key IN (1,21)))   or exists ( select 'x' from project_controller pc where pc.project_key = proj.project_key and pc.person_key = '3896' and pc.role_key in (3, 14, 19, 20, 15, 18, 17) )  or exists ( select 'x' from project_controller pc join alternate a on a.person_key = pc.person_key and a.role_key = pc.role_key where pc.project_key = proj.project_key and pc.primary_ind = 'Y' and a.alternate_key = '3896' and pc.role_key in (3, 14, 19, 20, 15, 18, 17) )  or ( exists ( select pra.project_key from project_open_access_view pra where pra.billing_viewer_open = 'Y' and pra.project_key = proj.project_key ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 20 ) or proj.customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 20 ) ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 20 ) or proj.owning_customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 20 ) ) )  or ( exists ( select pra.project_key from project_open_access_view pra where pra.billing_manager_open = 'Y' and pra.project_key = proj.project_key ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 19 ) or proj.customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 19 ) ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 19 ) or proj.owning_customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 19 ) ) )  or ( exists ( select pra.project_key from project_open_access_view pra where pra.project_viewer_open = 'Y' and pra.project_key = proj.project_key ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 14 ) or proj.customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 14 ) ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 14 ) or proj.owning_customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 14 ) ) )  or ( exists ( select pra.project_key from project_open_access_view pra where pra.project_manager_open = 'Y' and pra.project_key = proj.project_key ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 3 ) or proj.customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 3 ) ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 3 ) or proj.owning_customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 3 ) ) )  or ( exists ( select pra.project_key from project_open_access_view pra where pra.resource_planner_open = 'Y' and pra.project_key = proj.project_key ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 15 ) or proj.customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 15 ) ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 15 ) or proj.owning_customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 15 ) ) )  or ( exists ( select pra.project_key from project_open_access_view pra where pra.resource_assigner_open = 'Y' and pra.project_key = proj.project_key ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 18 ) or proj.customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 18 ) ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 18 ) or proj.owning_customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 18 ) ) )  or ( exists ( select pra.project_key from project_open_access_view pra where pra.resource_requestor_open = 'Y' and pra.project_key = proj.project_key ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 17 ) or proj.customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 1 and oap.role_key = 17 ) ) and ( exists ( select 'x' from org_access_person oap where oap.global_access = 'Y' and oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 17 ) or proj.owning_customer_key in ( select h.customer_key from org_access_hierarchy h join org_access_person oap on oap.org_access_person_key = h.org_access_person_key where oap.person_key = '3896' and oap.access_type = 4 and oap.role_key = 17 ) ) ) or exists ( select 'x' from project_controller pc where pc.project_key = proj.project_key and pc.person_key = '3896' and pc.role_key in (12, 13) )  or exists ( select 'x' from project_controller pc join alternate a on a.person_key = pc.person_key and a.role_key = pc.role_key where pc.project_key = proj.project_key and pc.primary_ind = 'Y' and a.alternate_key = '3896' and pc.role_key in (12, 13) ) 
) wrE6 ON (
	wrE19."Project Key" = wrE6."Project Key"
)