SELECT 
	wrE19."Cost Pool Group" AS c0,
	wrE19."Cost Pool" AS c1,
	wrE19."Actual or Budget Name" AS c2,
	wrE20."Fiscal Month" AS c3,
	wrE19."Fiscal Period" AS c4,
	wrE19."Current Period Pool Amount" AS c5,
	wrE19."YTD Pool Amount" AS c6,
	wrE19."Current Period Base Amount" AS c7,
	wrE19."YTD Base Amount" AS c8,
	wrE20."Fiscal Month End Date" AS c9,
	wrE20."Fiscal Year End Date" AS c10,
	wrE20."Fiscal Month Key" AS c11,
	wrE19."Fiscal Month Key" AS c12,
	wrE19."Legal Entity Key" AS c13,
	wrE19."Cost Pool Group Key" AS c14,
	wrE19."Cost Pool Key" AS c15,
	wrE19."Display Sequence" AS c16
FROM (select x.fiscal_month_key      as "Fiscal Month Key", x.legal_entity_key      as "Legal Entity Key", x.cost_pool_group_key   as "Cost Pool Group Key", x.cost_pool_key         as "Cost Pool Key", x.cost_pool_group_name  as "Cost Pool Group", x.cost_pool             as "Cost Pool", x.actual_or_budget      as "Actual or Budget Name", x.fiscal_period         as "Fiscal Period", x.display_sequence      as "Display Sequence", x.ytd_pool_amount       as "YTD Pool Amount", x.ytd_base_amount       as "YTD Base Amount", x.ytd_rate              as "YTD Rate", x.curr_pool_amount      as "Current Period Pool Amount", x.curr_base_amount      as "Current Period Base Amount", x.curr_rate             as "Current Period Rate", x."Legal Entity Code", x."Legal Entity Name", x."Cost Pool Group Currency Code" as "Cost Pool Group Currency Code"   from ( select fm.fiscal_month_key             as fiscal_month_key, le.customer_key                 as legal_entity_key, cpg.cost_pool_group_key         as cost_pool_group_key, cp.cost_pool_key                as cost_pool_key,  le.customer_code 				as "Legal Entity Code", le.customer_name 				as "Legal Entity Name", cpg.cost_pool_group_name        as cost_pool_group_name, cp.cost_pool_name               as cost_pool, 'Actual'                        as actual_or_budget, case when fm.period_number < 10 then concat(concat(concat(fy.name,'-'),'0'),cast(fm.period_number as varchar(4))) else concat(concat(fy.name,'-'),cast(fm.period_number as varchar(4))) end								as fiscal_period, cp.display_sequence             as display_sequence, cpsc.amount                     as ytd_pool_amount, cpbc.amount                     as ytd_base_amount, cpc.rate                        as ytd_rate, cpsc_p.amount                   as prev_pool_amount, cpbc_p.amount                   as prev_base_amount, case when cpsc_p.amount is null then cpsc.amount else cpsc.amount - cpsc_p.amount end as curr_pool_amount, case when cpbc_p.amount is null then cpbc.amount else cpbc.amount - cpbc_p.amount end as curr_base_amount, case when (cpsc_p.amount is null and cpbc_p.amount is null) then    round((case when cpbc.amount = 0 then 0 else (100 * cpsc.amount/cpbc.amount) end),6) else    round((case when (cpbc.amount - cpbc_p.amount) = 0 then 0 else (100 * (cpsc.amount - cpsc_p.amount) / (cpbc.amount - cpbc_p.amount)) end),6) end as curr_rate, cc.iso_currency_code            as "Cost Pool Group Currency Code" from cost_pool_group cpg join            currency_code           cc      on cc.currency_code_key = cpg.currency_code_key join 			cost_pool_group_mle 	mle 	on mle.cost_pool_group_key = cpg.cost_pool_group_key join            customer                le      on le.customer_key = mle.legal_entity_key join            cost_pool_group_calc    cpgc    on cpgc.cost_pool_group_key = cpg.cost_pool_group_key and cpgc.voided_timestamp is null and cpgc.voided_by is null and not exists (select 'x' from cost_pool_group_calc_budget cpgcb where cpgcb.cost_pool_group_calc_key = cpgc.cost_pool_group_calc_key) join            fiscal_month            fm      on fm.fiscal_month_key = cpgc.post_fiscal_month_key join            fiscal_year             fy      on fy.fiscal_year_key = fm.fiscal_year_key join            cost_pool               cp      on cp.cost_pool_group_key = cpgc.cost_pool_group_key and cp.post_rate_to_cost_struct = 'Y' left outer join cost_pool_calc          cpc     on cpc.cost_pool_group_calc_key = cpgc.cost_pool_group_calc_key and cpc.cost_pool_key = cp.cost_pool_key left outer join (select cost_pool_calc_key, sum(amount) amount from cost_pool_source_calc   group by cost_pool_calc_key)   cpsc on cpsc.cost_pool_calc_key = cpc.cost_pool_calc_key left outer join (select cost_pool_calc_key, sum(amount) amount from cost_pool_basis_calc    group by cost_pool_calc_key)   cpbc on cpbc.cost_pool_calc_key = cpc.cost_pool_calc_key left outer join fiscal_month            fm_p    on fm_p.end_date = (fm.begin_date - INTERVAL '1' day) and fm_p.fiscal_year_key = fm.fiscal_year_key left outer join cost_pool_group_calc    cpgc_p  on cpgc_p.cost_pool_group_key = cpg.cost_pool_group_key and cpgc_p.post_fiscal_month_key = fm_p.fiscal_month_key and cpgc_p.voided_timestamp is null and cpgc_p.voided_by is null and not exists (select 'x' from cost_pool_group_calc_budget cpgcb where cpgcb.cost_pool_group_calc_key = cpgc_p.cost_pool_group_calc_key) left outer join cost_pool_calc          cpc_p   on cpc_p.cost_pool_group_calc_key = cpgc_p.cost_pool_group_calc_key and cpc_p.cost_pool_key = cp.cost_pool_key left outer join (select cost_pool_calc_key, sum(amount) amount from cost_pool_source_calc   group by cost_pool_calc_key)    cpsc_p on cpsc_p.cost_pool_calc_key = cpc_p.cost_pool_calc_key left outer join (select cost_pool_calc_key, sum(amount) amount from cost_pool_basis_calc    group by cost_pool_calc_key)    cpbc_p on cpbc_p.cost_pool_calc_key = cpc_p.cost_pool_calc_key  union all select fm.fiscal_month_key             as fiscal_month_key, le.customer_key                 as legal_entity_key, cpg.cost_pool_group_key         as cost_pool_group_key, cp.cost_pool_key                as cost_pool_key, le.customer_code 				as "Legal Entity Code", le.customer_name 				as "Legal Entity Name", cpg.cost_pool_group_name        as cost_pool_group_name, cp.cost_pool_name               as cost_pool, bn.budget_name                  as actual_or_budget, case when fm.period_number < 10 then concat(concat(concat(fy.name,'-'),'0'),cast(fm.period_number as varchar(4))) else concat(concat(fy.name,'-'),cast(fm.period_number as varchar(4))) end								as fiscal_period, cp.display_sequence             as display_sequence, cpsc.amount                     as ytd_pool_amount, cpbc.amount                     as ytd_base_amount, cpc.rate                        as ytd_rate, cpsc_p.amount                   as prev_pool_amount, cpbc_p.amount                   as prev_base_amount, case when cpsc_p.amount is null then cpsc.amount else cpsc.amount - cpsc_p.amount end as curr_pool_amount, case when cpbc_p.amount is null then cpbc.amount else cpbc.amount - cpbc_p.amount end as curr_base_amount, case when (cpsc_p.amount is null and cpbc_p.amount is null) then    round((case when cpbc.amount = 0 then 0 else (100 * cpsc.amount/cpbc.amount) end),6) else    round((case when (cpbc.amount - cpbc_p.amount) = 0 then 0 else (100 * (cpsc.amount - cpsc_p.amount) / (cpbc.amount - cpbc_p.amount)) end),6) end as curr_rate, cc.iso_currency_code            as "Cost Pool Group Currency Code"  from cost_pool_group cpg join            currency_code           cc      on cc.currency_code_key = cpg.currency_code_key join            cost_pool_group_calc    cpgc    on cpgc.cost_pool_group_key = cpg.cost_pool_group_key and cpgc.voided_timestamp is null and cpgc.voided_by is null and exists (select 'x' from cost_pool_group_calc_budget cpgcb where cpgcb.cost_pool_group_calc_key = cpgc.cost_pool_group_calc_key) join            cost_pool               cp      on cp.cost_pool_group_key = cpgc.cost_pool_group_key and cp.post_rate_to_cost_struct = 'Y' left outer join cost_pool_calc          cpc     on cpc.cost_pool_group_calc_key = cpgc.cost_pool_group_calc_key and cpc.cost_pool_key = cp.cost_pool_key left outer join (select cost_pool_calc_key, sum(amount) amount  from cost_pool_source_calc  group by cost_pool_calc_key)    cpsc on cpsc.cost_pool_calc_key = cpc.cost_pool_calc_key left outer join (select cost_pool_calc_key, sum(amount) amount  from cost_pool_basis_calc   group by cost_pool_calc_key)    cpbc on cpbc.cost_pool_calc_key = cpc.cost_pool_calc_key join 			cost_pool_group_mle 	mle 	on mle.cost_pool_group_key = cpg.cost_pool_group_key join            customer                le      on le.customer_key = mle.legal_entity_key join            fiscal_month            fm      on fm.fiscal_month_key = cpgc.post_fiscal_month_key join            fiscal_year             fy      on fy.fiscal_year_key = fm.fiscal_year_key join 			(select distinct cb.cost_pool_group_calc_key, b.budget_name_key from cost_pool_group_calc_budget cb join budget b on b.budget_key = cb.budget_key) cpgc_budget on cpgc_budget.cost_pool_group_calc_key = cpgc.cost_pool_group_calc_key join 			budget_name 			bn 		on bn.budget_name_key = cpgc_budget.budget_name_key left outer join     fiscal_month            fm_p    on fm_p.end_date = (fm.begin_date - INTERVAL '1' day) and fm_p.fiscal_year_key = fm.fiscal_year_key left outer join     cost_pool_group_calc    cpgc_p  on cpgc_p.cost_pool_group_key = cpg.cost_pool_group_key and cpgc_p.voided_timestamp is null and cpgc_p.voided_by is null and cpgc_p.post_fiscal_month_key = fm_p.fiscal_month_key and exists (select 'x' from cost_pool_group_calc_budget cpgcb where cpgcb.cost_pool_group_calc_key = cpgc_p.cost_pool_group_calc_key) left outer join     cost_pool_calc          cpc_p   on cpc_p.cost_pool_group_calc_key = cpgc_p.cost_pool_group_calc_key and cpc_p.cost_pool_key = cp.cost_pool_key left outer join     (select cost_pool_calc_key, sum(amount) amount from cost_pool_source_calc   group by cost_pool_calc_key)    cpsc_p on cpsc_p.cost_pool_calc_key = cpc_p.cost_pool_calc_key left outer join     (select cost_pool_calc_key, sum(amount) amount from cost_pool_basis_calc    group by cost_pool_calc_key)    cpbc_p on cpbc_p.cost_pool_calc_key = cpc_p.cost_pool_calc_key ) x order by x.cost_pool_group_name, x.actual_or_budget, x.fiscal_period desc, x.display_sequence
) wrE19
INNER JOIN (select fm.fiscal_month_key     as "Fiscal Month Key", fm.period_number        as "Fiscal Month", fm.begin_date           as "Fiscal Month Begin Date", fm.end_date             as "Fiscal Month End Date", case when fm.period_number < 10 then concat(concat(concat(fy.name,'-'),'0'),cast(fm.period_number as varchar(4))) else concat(concat(fy.name,'-'),cast(fm.period_number as varchar(4))) end					    as "Fiscal Period", case when fm.period_number in (1,2,3)     then 'Q1' when fm.period_number in (4,5,6)     then 'Q2' when fm.period_number in (7,8,9)     then 'Q3' when fm.period_number in (10,11,12)  then 'Q4' end                     as "Fiscal Quarter", fq.begin_date           as "Fiscal Quarter Begin Date", fq.end_date             as "Fiscal Quarter End Date", fy.name                 as "Fiscal Year", fy.begin_date           as "Fiscal Year Begin Date", fy.end_date             as "Fiscal Year End Date" from fiscal_month fm  join fiscal_year            fy  on fy.fiscal_year_key = fm.fiscal_year_key join fiscal_quarter         fq  on fq.fiscal_quarter_key = fm.fiscal_quarter_key  
) wrE20 ON (
	wrE19."Fiscal Month Key" = wrE20."Fiscal Month Key"
)
ORDER BY 
	wrE19."Cost Pool Group" ASC, wrE19."Display Sequence" ASC, wrE19."Cost Pool" ASC, wrE20."Fiscal Month End Date" DESC